{"version":3,"file":"events.js","names":["Events","constructor","config","retrieveEventTypes","version","url","host","response","get","fetch","sk","json","err","error","determineError","retrieveEvents","body","queryString","Object","keys","map","key","join","retrieveEvent","eventId","retrieveEventNotification","notificationId","retry","post","webhookId","retryAll"],"sources":["../../../src/api/events/events.js"],"sourcesContent":["import fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport { get, post } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /events endpoint\r\n *\r\n * @export\r\n * @class Events\r\n */\r\nexport default class Events {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of event types grouped by their respective version that you can\r\n     * configure on your webhooks.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} version Events Version.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEventTypes(version) {\r\n        try {\r\n            let url = `${this.config.host}/event-types`;\r\n            if (version) {\r\n                url += `?version=${version}`;\r\n            }\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves events ordered by the event date in descending order (latest first).\r\n     * Results can be paged by specifying the skip and limit query parameters.\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Events request body.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEvents(body) {\r\n        try {\r\n            let url = `${this.config.host}/events`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the event with the specified identifier string. The event data includes the full event\r\n     * details, the schema of which will vary based on the type.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the request event response.\r\n     */\r\n    async retrieveEvent(eventId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/events/${eventId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the attempts for a specific event notification\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the request event notifications response.\r\n     */\r\n    async retrieveEventNotification(body) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/events/${body.eventId}/notifications/${body.notificationId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries a specific webhook notification for the given event\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the retry event response.\r\n     */\r\n    async retry(body) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/events/${body.eventId}/webhooks/${body.webhookId}/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries all webhook notifications configured for the specified event\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the retry events response.\r\n     */\r\n    async retryAll(eventId) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/events/${eventId}/webhooks/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}