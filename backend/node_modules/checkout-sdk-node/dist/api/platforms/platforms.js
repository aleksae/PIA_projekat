"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _config = require("../../config");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
const FormData = require('form-data');

/**
 * Class dealing with the platforms api
 *
 * @export
 * @class Platforms
 */
class Platforms {
  constructor(config) {
    this.config = config;
  }

  /**
   * Our Platforms solution provides an easy way to upload identity documentation required for full due diligence.
   *
   * @memberof Platforms
   * @param {string} purpose The purpose of the file upload.
   * @param {Object} path The local path of the file to upload, and its type.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  uploadFile(purpose, path) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const form = new FormData();
        form.append('path', path);
        form.append('purpose', purpose);
        const url = `${_this.config.host.includes('sandbox') ? _config.PLATFORMS_FILES_SANDBOX_URL : _config.PLATFORMS_FILES_LIVE_URL}`;
        const response = yield (0, _http.post)(_nodeFetch.default, url, _objectSpread(_objectSpread({}, _this.config), {}, {
          formData: true
        }), _this.config.sk, form);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Onboard a sub-entity so they can start receiving payments. Once created,
   * Checkout.com will run due diligence checks. If the checks are successful,
   * we'll enable payment capabilities for that sub-entity and they will start
   * receiving payments.
   *
   * @memberof Platforms
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  onboardSubEntity(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_nodeFetch.default, `${_this2.config.host}/accounts/entities`, _this2.config, _this2.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Use this endpoint to retrieve a sub-entity and its full details.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getSubEntityDetails(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_nodeFetch.default, `${_this3.config.host}/accounts/entities/${id}`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can update all fields under the Contact details, Profile, and Company objects.
   * You can also add identification information to complete due diligence requirements.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updateSubEntityDetails(id, body) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_nodeFetch.default, `${_this4.config.host}/accounts/entities/${id}`, _this4.config, _this4.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve the details of a specific payment instrument used for sub-entity payouts.
   *
   * @memberof Platforms
   * @param {string} entityId The sub-entity's ID.
   * @param {string} id The payment instrument's ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  getPaymentInstrumentDetails(entityId, id) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_nodeFetch.default, `${_this5.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Platforms
   * @param {string} entityId Sub-entity id.
   * @param {string} id Payment instrument's id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updatePaymentInstrumentDetails(entityId, id, body) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_nodeFetch.default, `${_this6.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`, _this6.config, _this6.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @deprecated Use the payment instrument operations at /payment-instruments instead.
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  createPaymentInstrument(id, body) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_nodeFetch.default, `${_this7.config.host}/accounts/entities/${id}/instruments`, _this7.config, _this7.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Platforms
   * @param {string} id Sub-entity id.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  addPaymentInstrument(id, body) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_nodeFetch.default, `${_this8.config.host}/accounts/entities/${id}/payment-instruments`, _this8.config, _this8.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Fetch all of the payment instruments for a sub-entity. You can filter by status to
   * identify verified instruments that are ready to be used for Payouts.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @param {string} status The status of your sub-entity's payment instrument.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  queryPaymentInstruments(id, status) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      try {
        const url = `${_this9.config.host}/accounts/entities/${id}/payment-instruments${status ? `?status=${status}` : ''}`;
        const response = yield (0, _http.get)(_nodeFetch.default, url, _this9.config, _this9.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can schedule when your sub-entities receive their funds using our Platforms solution.
   * Use this endpoint to retrieve information about a sub-entity's schedule.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  retrieveSubEntityPayoutSchedule(id) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_nodeFetch.default, `${_this10.config.host}/accounts/entities/${id}/payout-schedules`, _this10.config, _this10.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * You can schedule when your sub-entities receive their funds using our Platforms solution.
   * Use this endpoint to update a sub-entity's schedule.
   *
   * @memberof Platforms
   * @param {string} id The sub-entity's ID.
   * @param {Object} body Platforms request body.
   * @return {Promise<Object>} A promise to the Platforms response.
   */
  updateSubEntityPayoutSchedule(id, body) {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_nodeFetch.default, `${_this11.config.host}/accounts/entities/${id}/payout-schedules`, _this11.config, _this11.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Platforms;
//# sourceMappingURL=platforms.js.map