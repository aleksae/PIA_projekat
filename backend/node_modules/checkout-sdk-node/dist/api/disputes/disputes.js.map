{"version":3,"file":"disputes.js","names":["Disputes","constructor","config","get","body","url","host","queryString","Object","keys","map","key","join","response","fetch","sk","json","err","error","determineError","getDetails","disputeId","accept","post","provideEvidence","put","getEvidence","submit","getDisputeSchemeFiles"],"sources":["../../../src/api/disputes/disputes.js"],"sourcesContent":["import fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport { get, post, put } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /disputes endpoint\r\n *\r\n * @export\r\n * @class Disputes\r\n */\r\nexport default class Disputes {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of all disputes against your business. The results will be returned\r\n     * in reverse chronological order, showing the last modified dispute (for example,\r\n     * where you've recently added a piece of evidence) first. You can use the optional\r\n     * parameters below to skip or limit results.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {Object} body Disputes params.\r\n     * @return {Promise<Object>} A promise to the disputes response.\r\n     */\r\n    async get(body) {\r\n        try {\r\n            let url = `${this.config.host}/disputes`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getDetails(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async accept(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}/accept`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds supporting evidence to a dispute. Before using this endpoint, you first need\r\n     * to upload your files using the file uploader. You will receive a file id\r\n     * (prefixed by file_) which you can then use in your request. Note that this only\r\n     * attaches the evidence to the dispute, it does not send it to us.\r\n     * Once ready, you will need to submit it.\r\n     *\r\n     * You must provide at least one evidence type in the body of your request.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @param {Object} body Evidence\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async provideEvidence(disputeId, body) {\r\n        try {\r\n            const response = await put(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of the evidence submitted in response to a specific dispute.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getEvidence(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * With this final request, you can submit the evidence that you have previously\r\n     * provided. Make sure you have provided all the relevant information before using\r\n     * this request. You will not be able to amend your evidence once you have submitted it.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async submit(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all of the scheme files of a dispute using the dispute identifier.\r\n     * Currently available only for VISA disputes.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute scheme files response.\r\n     */\r\n    async getDisputeSchemeFiles(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/disputes/${disputeId}/schemefiles`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}