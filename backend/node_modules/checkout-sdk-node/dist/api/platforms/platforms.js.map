{"version":3,"file":"platforms.js","names":["FormData","require","Platforms","constructor","config","uploadFile","purpose","path","form","append","url","host","includes","PLATFORMS_FILES_SANDBOX_URL","PLATFORMS_FILES_LIVE_URL","response","post","fetch","formData","sk","json","err","error","determineError","onboardSubEntity","body","getSubEntityDetails","id","get","updateSubEntityDetails","put","getPaymentInstrumentDetails","entityId","updatePaymentInstrumentDetails","patch","createPaymentInstrument","addPaymentInstrument","queryPaymentInstruments","status","retrieveSubEntityPayoutSchedule","updateSubEntityPayoutSchedule"],"sources":["../../../src/api/platforms/platforms.js"],"sourcesContent":["import fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport {get, patch, post, put} from '../../services/http';\r\nimport { PLATFORMS_FILES_LIVE_URL, PLATFORMS_FILES_SANDBOX_URL } from '../../config';\r\n\r\nconst FormData = require('form-data');\r\n\r\n/**\r\n * Class dealing with the platforms api\r\n *\r\n * @export\r\n * @class Platforms\r\n */\r\nexport default class Platforms {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Our Platforms solution provides an easy way to upload identity documentation required for full due diligence.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} purpose The purpose of the file upload.\r\n     * @param {Object} path The local path of the file to upload, and its type.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async uploadFile(purpose, path) {\r\n        try {\r\n            const form = new FormData();\r\n            form.append('path', path);\r\n            form.append('purpose', purpose);\r\n\r\n            const url = `${\r\n                this.config.host.includes('sandbox')\r\n                    ? PLATFORMS_FILES_SANDBOX_URL\r\n                    : PLATFORMS_FILES_LIVE_URL\r\n            }`;\r\n\r\n            const response = await post(\r\n                fetch,\r\n                url,\r\n                { ...this.config, formData: true },\r\n                this.config.sk,\r\n                form\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Onboard a sub-entity so they can start receiving payments. Once created,\r\n     * Checkout.com will run due diligence checks. If the checks are successful,\r\n     * we'll enable payment capabilities for that sub-entity and they will start\r\n     * receiving payments.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async onboardSubEntity(body) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this endpoint to retrieve a sub-entity and its full details.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id Sub-entity id.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async getSubEntityDetails(id) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * You can update all fields under the Contact details, Profile, and Company objects.\r\n     * You can also add identification information to complete due diligence requirements.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id Sub-entity id.\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async updateSubEntityDetails(id, body) {\r\n        try {\r\n            const response = await put(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve the details of a specific payment instrument used for sub-entity payouts.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} entityId The sub-entity's ID.\r\n     * @param {string} id The payment instrument's ID.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async getPaymentInstrumentDetails(entityId, id) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a session by providing information about the environment.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} entityId Sub-entity id.\r\n     * @param {string} id Payment instrument's id.\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async updatePaymentInstrumentDetails(entityId, id, body) {\r\n        try {\r\n            const response = await patch(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${entityId}/payment-instruments/${id}`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a session by providing information about the environment.\r\n     *\r\n     * @deprecated Use the payment instrument operations at /payment-instruments instead.\r\n     * @memberof Platforms\r\n     * @param {string} id Sub-entity id.\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async createPaymentInstrument(id, body) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}/instruments`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a session by providing information about the environment.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id Sub-entity id.\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async addPaymentInstrument(id, body) {\r\n        try {\r\n            const response = await post(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}/payment-instruments`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch all of the payment instruments for a sub-entity. You can filter by status to\r\n     * identify verified instruments that are ready to be used for Payouts.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id The sub-entity's ID.\r\n     * @param {string} status The status of your sub-entity's payment instrument.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async queryPaymentInstruments(id, status) {\r\n        try {\r\n            const url = `${this.config.host}/accounts/entities/${id}/payment-instruments${\r\n                status ? `?status=${status}` : ''\r\n            }`;\r\n\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * You can schedule when your sub-entities receive their funds using our Platforms solution.\r\n     * Use this endpoint to retrieve information about a sub-entity's schedule.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id The sub-entity's ID.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async retrieveSubEntityPayoutSchedule(id) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}/payout-schedules`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * You can schedule when your sub-entities receive their funds using our Platforms solution.\r\n     * Use this endpoint to update a sub-entity's schedule.\r\n     *\r\n     * @memberof Platforms\r\n     * @param {string} id The sub-entity's ID.\r\n     * @param {Object} body Platforms request body.\r\n     * @return {Promise<Object>} A promise to the Platforms response.\r\n     */\r\n    async updateSubEntityPayoutSchedule(id, body) {\r\n        try {\r\n            const response = await put(\r\n                fetch,\r\n                `${this.config.host}/accounts/entities/${id}/payout-schedules`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAAqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErF,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,SAAS,CAAC;EAC3BC,WAAW,CAACC,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUC,UAAU,CAACC,OAAO,EAAEC,IAAI,EAAE;IAAA;IAAA;MAC5B,IAAI;QACA,MAAMC,IAAI,GAAG,IAAIR,QAAQ,EAAE;QAC3BQ,IAAI,CAACC,MAAM,CAAC,MAAM,EAAEF,IAAI,CAAC;QACzBC,IAAI,CAACC,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;QAE/B,MAAMI,GAAG,GAAI,GACT,KAAI,CAACN,MAAM,CAACO,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC,GAC9BC,mCAA2B,GAC3BC,gCACT,EAAC;QAEF,MAAMC,QAAQ,SAAS,IAAAC,UAAI,EACvBC,kBAAK,EACLP,GAAG,kCACE,KAAI,CAACN,MAAM;UAAEc,QAAQ,EAAE;QAAI,IAChC,KAAI,CAACd,MAAM,CAACe,EAAE,EACdX,IAAI,CACP;QACD,aAAaO,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUE,gBAAgB,CAACC,IAAI,EAAE;IAAA;IAAA;MACzB,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAC,UAAI,EACvBC,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,oBAAmB,EACvC,MAAI,CAACP,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUI,mBAAmB,CAACC,EAAE,EAAE;IAAA;IAAA;MAC1B,IAAI;QACA,MAAMZ,QAAQ,SAAS,IAAAa,SAAG,EACtBX,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,EAAC,EAC7C,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,CACjB;QACD,aAAaJ,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUO,sBAAsB,CAACF,EAAE,EAAEF,IAAI,EAAE;IAAA;IAAA;MACnC,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAe,SAAG,EACtBb,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,EAAC,EAC7C,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUS,2BAA2B,CAACC,QAAQ,EAAEL,EAAE,EAAE;IAAA;IAAA;MAC5C,IAAI;QACA,MAAMZ,QAAQ,SAAS,IAAAa,SAAG,EACtBX,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBqB,QAAS,wBAAuBL,EAAG,EAAC,EAC7E,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,CACjB;QACD,aAAaJ,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUW,8BAA8B,CAACD,QAAQ,EAAEL,EAAE,EAAEF,IAAI,EAAE;IAAA;IAAA;MACrD,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAmB,WAAK,EACxBjB,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBqB,QAAS,wBAAuBL,EAAG,EAAC,EAC7E,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUa,uBAAuB,CAACR,EAAE,EAAEF,IAAI,EAAE;IAAA;IAAA;MACpC,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAC,UAAI,EACvBC,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,cAAa,EACzD,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUc,oBAAoB,CAACT,EAAE,EAAEF,IAAI,EAAE;IAAA;IAAA;MACjC,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAC,UAAI,EACvBC,kBAAK,EACJ,GAAE,MAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,sBAAqB,EACjE,MAAI,CAACvB,MAAM,EACX,MAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUe,uBAAuB,CAACV,EAAE,EAAEW,MAAM,EAAE;IAAA;IAAA;MACtC,IAAI;QACA,MAAM5B,GAAG,GAAI,GAAE,MAAI,CAACN,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,uBACpDW,MAAM,GAAI,WAAUA,MAAO,EAAC,GAAG,EAClC,EAAC;QAEF,MAAMvB,QAAQ,SAAS,IAAAa,SAAG,EAACX,kBAAK,EAAEP,GAAG,EAAE,MAAI,CAACN,MAAM,EAAE,MAAI,CAACA,MAAM,CAACe,EAAE,CAAC;QACnE,aAAaJ,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACUiB,+BAA+B,CAACZ,EAAE,EAAE;IAAA;IAAA;MACtC,IAAI;QACA,MAAMZ,QAAQ,SAAS,IAAAa,SAAG,EACtBX,kBAAK,EACJ,GAAE,OAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,mBAAkB,EAC9D,OAAI,CAACvB,MAAM,EACX,OAAI,CAACA,MAAM,CAACe,EAAE,CACjB;QACD,aAAaJ,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUkB,6BAA6B,CAACb,EAAE,EAAEF,IAAI,EAAE;IAAA;IAAA;MAC1C,IAAI;QACA,MAAMV,QAAQ,SAAS,IAAAe,SAAG,EACtBb,kBAAK,EACJ,GAAE,OAAI,CAACb,MAAM,CAACO,IAAK,sBAAqBgB,EAAG,mBAAkB,EAC9D,OAAI,CAACvB,MAAM,EACX,OAAI,CAACA,MAAM,CAACe,EAAE,EACdM,IAAI,CACP;QACD,aAAaV,QAAQ,CAACK,IAAI;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV,MAAMC,KAAK,SAAS,IAAAC,sBAAc,EAACF,GAAG,CAAC;QACvC,MAAMC,KAAK;MACf;IAAC;EACL;AACJ;AAAC"}