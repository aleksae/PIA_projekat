{"version":3,"file":"reconciliation.js","names":["Reconciliation","constructor","config","getPayments","body","url","host","queryString","Object","keys","map","key","join","response","get","fetch","sk","res","json","_links","next","nextLink","href","page","match","err","error","determineError","getPayment","paymentId","getPaymentsCsv","csv","getStatements","getStatementCsv","statementId","getPaymentsActions","getPaymentsAction","actionsId","getPaymentsActionsCsv","getAction","actionId"],"sources":["../../../src/api/reconciliation/reconciliation.js"],"sourcesContent":["import fetch from 'node-fetch';\r\nimport { determineError } from '../../services/errors';\r\nimport { get } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /reporting endpoint\r\n *\r\n * @export\r\n * @class Reconciliation\r\n */\r\nexport default class Reconciliation {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPayments(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/payments`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            const res = await response.json;\r\n\r\n            // In case there is a \"next\" page, inject it in the response body\r\n            if (res._links && res._links.next) {\r\n                const nextLink = res._links.next.href;\r\n                return await { ...res, page: nextLink.match(/after=([^&]*)/)[1] };\r\n            }\r\n            return await res;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON payment report containing all of the data related to a specific payment,\r\n     * based on the payment's identifier.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} paymentId Payment id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPayment(paymentId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/reporting/payments/${paymentId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsCsv(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/payments/download`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(fetch, url, { ...this.config, csv: true }, this.config.sk);\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON report containing all statements within your specified parameters.\r\n     * Please note that the timezone for the request will be UTC.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getStatements(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/statements`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Downloads a CSV statement report containing all of the data related to a specific\r\n     * statement, based on the statement's identifier.\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} statementId Statement id.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getStatementCsv(statementId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/reporting/statements/${statementId}/payments/download`,\r\n                { ...this.config, csv: true },\r\n                this.config.sk\r\n            );\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all associated payment actions that impact your balance within the parameters you specify\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsActions(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/actions`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(fetch, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the reconciliation data of the payment action\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} actionsId Action id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsAction(actionsId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/reporting/payments/actions/${actionsId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a CSV report containing all payments within your specified parameters\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {Object} body Reconciliation request body.\r\n     * @return {Promise<Buffer>} A promise to the request reconciliation response.\r\n     */\r\n    async getPaymentsActionsCsv(body) {\r\n        try {\r\n            let url = `${this.config.host}/reporting/actions/download`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(fetch, url, { ...this.config, csv: true }, this.config.sk);\r\n            return await response.csv;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the reconciliation data of a payment action\r\n     *\r\n     * @memberof Reconciliation\r\n     * @param {string} actionId Action id.\r\n     * @return {Promise<Object>} A promise to the request reconciliation response.\r\n     */\r\n    async getAction(actionId) {\r\n        try {\r\n            const response = await get(\r\n                fetch,\r\n                `${this.config.host}/reporting/actions/${actionId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}